---
title: "Passing data across <slot/>"
author: henrikvilhelmberglund
authorlink: github.com/henrikvilhelmberglund/
date: 2023-04-22
layout: notes
---

<script>
  import ShowMany from "$lib/ShowMany.svelte";
  import App from "./App.svelte";
  import AppRaw from "./App.svelte?raw";
  import Component from "./Component.svelte";
  import ComponentRaw from "./Component.svelte?raw";
  import App2 from "./App2.svelte";
  import App2Raw from "./App2.svelte?raw";
  import Component2 from "./Component2.svelte";
  import Component2Raw from "./Component2.svelte?raw";
  import App3 from "./App3.svelte";
  import App3Raw from "./App3.svelte?raw";
  import Component3 from "./Component3.svelte";
  import Component3Raw from "./Component3.svelte?raw";
  import App4 from "./App4.svelte";
  import App4Raw from "./App4.svelte?raw";
  import Component4 from "./Component4.svelte";
  import Component4Raw from "./Component4.svelte?raw";
  import Bonus from "./Bonus.svelte";
  import BonusRaw from "./Bonus.svelte?raw";


</script>

We may want to pass data to a parent across a slot in the child component. How do we do this?

We can use **props in the slot**!

<ShowMany name={[
{name: "App", comp:App, raw:AppRaw, text: ""},
{name: "Component", comp:App, raw:ComponentRaw, text: ""},
]}/>

What if we want to use the variable name `count` in both the parent and child though? We can **give a specific name to the let binding**.

<ShowMany name={[
{name: "App2", comp:App2, raw:App2Raw, text: ""},
{name: "Component2", comp:App2, raw:Component2Raw, text: ""},
]}/>

### Actually passing data

Let's try to get some data out of the fragment and into the main script tag. How do we accomplish this?`

If we want to get data into the parent component (which has the fragment) we can **run functions inside of the fragment**.

<ShowMany name={[
{name: "App3", comp:App3, raw:App3Raw, text: ""},
{name: "Component3", comp:App3, raw:Component3Raw, text: ""},
]}/>

For the data in the child component, we can add a function to it as a prop and bind to it using the let directive.
Since we don't want to override the function in the parent we change the name in the let directive again.

<ShowMany name={[
{name: "App4", comp:App4, raw:App4Raw, text: "This is an example of binding to the function in the child."},
{name: "Component4", comp:App4, raw:Component4Raw, text: ""},
{name: "Bonus", comp:Bonus, raw:BonusRaw, text: "We can also use the variables as input to the functions!"},
]}/>
