var f=Object.freeze,W=Object.defineProperty;var k=(p,t)=>f(W(p,"raw",{value:f(t||p.slice())}));import{S as $,i as v,s as h,k as E,l as y,n as q,b as r,R as z,H as i,h as l,y as S,m as A,z as w,A as x,g as c,d as u,B as b,C as I,E as C,F as U,G as j,T as B,e as _,U as D}from"./index.5815ca79.js";import{E as F}from"./Example.f1c5c165.js";function G(p){let t,e,a;return{c(){t=E("input"),this.h()},l(n){t=y(n,"INPUT",{type:!0}),this.h()},h(){t.value=p[0],q(t,"type","text")},m(n,s){r(n,t,s),e||(a=z(t,"input",p[1]),e=!0)},p(n,[s]){s&1&&t.value!==n[0]&&(t.value=n[0])},i,o:i,d(n){n&&l(t),e=!1,a()}}}function N(p,t,e){let a="";function n(s){const o=this;let H=o.selectionStart,T=o.selectionEnd;e(0,a=o.value.toUpperCase()),o.selectionStart=H,o.selectionEnd=T}return[a,n]}class P extends ${constructor(t){super(),v(this,t,N,G,h,{})}}const R=p=>({}),m=p=>({slot:"example"}),V=p=>({}),d=p=>({slot:"code"});function J(p){let t,e;return t=new P({}),{c(){S(t.$$.fragment)},l(a){w(t.$$.fragment,a)},m(a,n){x(t,a,n),e=!0},i(a){e||(c(t.$$.fragment,a),e=!0)},o(a){u(t.$$.fragment,a),e=!1},d(a){b(t,a)}}}function K(p){let t;const e=p[0].default,a=I(e,p,p[1],m),n=a||J();return{c(){n&&n.c()},l(s){n&&n.l(s)},m(s,o){n&&n.m(s,o),t=!0},p(s,o){a&&a.p&&(!t||o&2)&&C(a,e,s,s[1],t?j(e,s[1],o,R):U(s[1]),m)},i(s){t||(c(n,s),t=!0)},o(s){u(n,s),t=!1},d(s){n&&n.d(s)}}}function L(p){let t,e=`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">onInput</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> selectionStart <span class="token operator">=</span> input<span class="token punctuation">.</span>selectionStart<span class="token punctuation">;</span>
    <span class="token keyword">let</span> selectionEnd <span class="token operator">=</span> input<span class="token punctuation">.</span>selectionEnd<span class="token punctuation">;</span>
    value <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    input<span class="token punctuation">.</span>selectionStart <span class="token operator">=</span> selectionStart<span class="token punctuation">;</span>
    input<span class="token punctuation">.</span>selectionEnd <span class="token operator">=</span> selectionEnd<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">on:</span>input=</span><span class="token language-javascript"><span class="token punctuation">{</span>onInput<span class="token punctuation">}</span></span> <span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>`,a;return{c(){t=new B(!1),a=_(),this.h()},l(n){t=D(n,!1),a=_(),this.h()},h(){t.a=a},m(n,s){t.m(e,n,s),r(n,a,s)},p:i,d(n){n&&l(a),n&&t.d()}}}function M(p){let t;const e=p[0].default,a=I(e,p,p[1],d),n=a||L();return{c(){n&&n.c()},l(s){n&&n.l(s)},m(s,o){n&&n.m(s,o),t=!0},p(s,o){a&&a.p&&(!t||o&2)&&C(a,e,s,s[1],t?j(e,s[1],o,V):U(s[1]),d)},i(s){t||(c(n,s),t=!0)},o(s){u(n,s),t=!1},d(s){n&&n.d(s)}}}var g;function O(p){let t,e,a;return e=new F({props:{src:String.raw(g||(g=k([`<script>
let value = "";
function onInput(event) {
const input = this;
let selectionStart = input.selectionStart;
let selectionEnd = input.selectionEnd;
value = input.value.toUpperCase();
input.selectionStart = selectionStart;
input.selectionEnd = selectionEnd;
}
<\/script>
<input on:input={onInput} {value} type="text">`]))),meta:{Wrapper:"/src/lib/Example.svelte",example:!0},$$slots:{code:[M],example:[K]},$$scope:{ctx:p}}}),{c(){t=E("div"),S(e.$$.fragment)},l(n){t=y(n,"DIV",{});var s=A(t);w(e.$$.fragment,s),s.forEach(l)},m(n,s){r(n,t,s),x(e,t,null),a=!0},p(n,[s]){const o={};s&2&&(o.$$scope={dirty:s,ctx:n}),e.$set(o)},i(n){a||(c(e.$$.fragment,n),a=!0)},o(n){u(e.$$.fragment,n),a=!1},d(n){n&&l(t),b(e)}}}function Q(p,t,e){let{$$slots:a={},$$scope:n}=t;return p.$$set=s=>{"$$scope"in s&&e(1,n=s.$$scope)},[a,n]}class nn extends ${constructor(t){super(),v(this,t,Q,O,h,{})}}export{nn as default};
