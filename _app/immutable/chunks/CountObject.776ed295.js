var v=Object.freeze,F=Object.defineProperty;var h=(o,a)=>v(F(o,"raw",{value:v(a||o.slice())}));import{S as D,i as H,s as O,k,q as j,a as G,l as m,m as d,r as x,h as u,c as N,b as i,D as y,R,u as W,H as g,y as S,z as q,A as B,g as r,d as f,B as I,C as U,E as V,F as z,G as A,T as J,e as C,U as K}from"./index.5815ca79.js";import{E as L}from"./Example.f1c5c165.js";function M(o){let a,e=o[0].count+"",s,n,t,p,_,$;return{c(){a=k("div"),s=j(e),n=G(),t=k("button"),p=j("Click me")},l(c){a=m(c,"DIV",{});var l=d(a);s=x(l,e),l.forEach(u),n=N(c),t=m(c,"BUTTON",{});var b=d(t);p=x(b,"Click me"),b.forEach(u)},m(c,l){i(c,a,l),y(a,s),i(c,n,l),i(c,t,l),y(t,p),_||($=R(t,"click",o[2]),_=!0)},p(c,[l]){l&1&&e!==(e=c[0].count+"")&&W(s,e)},i:g,o:g,d(c){c&&u(a),c&&u(n),c&&u(t),_=!1,$()}}}function P(o,a,e){let s={count:0};function n(){e(0,s.count++,s)}return[s,n,()=>n()]}class Q extends D{constructor(a){super(),H(this,a,P,M,O,{})}}const X=o=>({}),w=o=>({slot:"example"}),Y=o=>({}),E=o=>({slot:"code"});function Z(o){let a,e;return a=new Q({}),{c(){S(a.$$.fragment)},l(s){q(a.$$.fragment,s)},m(s,n){B(a,s,n),e=!0},i(s){e||(r(a.$$.fragment,s),e=!0)},o(s){f(a.$$.fragment,s),e=!1},d(s){I(a,s)}}}function nn(o){let a;const e=o[0].default,s=U(e,o,o[1],w),n=s||Z();return{c(){n&&n.c()},l(t){n&&n.l(t)},m(t,p){n&&n.m(t,p),a=!0},p(t,p){s&&s.p&&(!a||p&2)&&V(s,e,t,t[1],a?A(e,t[1],p,X):z(t[1]),w)},i(t){a||(r(n,t),a=!0)},o(t){f(n,t),a=!1},d(t){n&&n.d(t)}}}function tn(o){let a,e=`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>obj<span class="token punctuation">.</span>count<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>`,s;return{c(){a=new J(!1),s=C(),this.h()},l(n){a=K(n,!1),s=C(),this.h()},h(){a.a=s},m(n,t){a.m(e,n,t),i(n,s,t)},p:g,d(n){n&&u(s),n&&a.d()}}}function an(o){let a;const e=o[0].default,s=U(e,o,o[1],E),n=s||tn();return{c(){n&&n.c()},l(t){n&&n.l(t)},m(t,p){n&&n.m(t,p),a=!0},p(t,p){s&&s.p&&(!a||p&2)&&V(s,e,t,t[1],a?A(e,t[1],p,Y):z(t[1]),E)},i(t){a||(r(n,t),a=!0)},o(t){f(n,t),a=!1},d(t){n&&n.d(t)}}}var T;function sn(o){let a,e,s;return e=new L({props:{src:String.raw(T||(T=h([`<script>
let obj = {
count: 0
};
function increment() {
obj.count++;
}
<\/script>
<div>{obj.count}</div>
<button on:click={()=>increment()}>Click me</button>`]))),meta:{Wrapper:"/src/lib/Example.svelte",example:!0},$$slots:{code:[an],example:[nn]},$$scope:{ctx:o}}}),{c(){a=k("div"),S(e.$$.fragment)},l(n){a=m(n,"DIV",{});var t=d(a);q(e.$$.fragment,t),t.forEach(u)},m(n,t){i(n,a,t),B(e,a,null),s=!0},p(n,[t]){const p={};t&2&&(p.$$scope={dirty:t,ctx:n}),e.$set(p)},i(n){s||(r(e.$$.fragment,n),s=!0)},o(n){f(e.$$.fragment,n),s=!1},d(n){n&&u(a),I(e)}}}function en(o,a,e){let{$$slots:s={},$$scope:n}=a;return o.$$set=t=>{"$$scope"in t&&e(1,n=t.$$scope)},[s,n]}class ln extends D{constructor(a){super(),H(this,a,en,sn,O,{})}}export{ln as default};
