var x=Object.freeze,A=Object.defineProperty;var W=(o,a)=>x(A(o,"raw",{value:x(a||o.slice())}));import{S,i as q,s as N,k as f,q as $,a as B,l as _,m,r as j,h as l,c as D,b as r,G as v,Q as E,u as K,B as O,D as L,w as U,x as V,y as z,f as d,t as g,z as F,F as G,H as J,I as Q,J as R,R as P,e as M,T as X}from"./index-58af1356.js";import{E as Y}from"./Example-d1081e90.js";function Z(o){let a,e=o[0].count+"",t,s,n,p,k,i,b,h,y;return{c(){a=f("div"),t=$(e),s=B(),n=f("button"),p=$("This does not update the DOM"),k=B(),i=f("button"),b=$("But this will trigger the update (assigned in the function)")},l(c){a=_(c,"DIV",{});var u=m(a);t=j(u,e),u.forEach(l),s=D(c),n=_(c,"BUTTON",{});var T=m(n);p=j(T,"This does not update the DOM"),T.forEach(l),k=D(c),i=_(c,"BUTTON",{});var w=m(i);b=j(w,"But this will trigger the update (assigned in the function)"),w.forEach(l)},m(c,u){r(c,a,u),v(a,t),r(c,s,u),r(c,n,u),v(n,p),r(c,k,u),r(c,i,u),v(i,b),h||(y=[E(n,"click",o[3]),E(i,"click",o[4])],h=!0)},p(c,[u]){u&1&&e!==(e=c[0].count+"")&&K(t,e)},i:O,o:O,d(c){c&&l(a),c&&l(s),c&&l(n),c&&l(k),c&&l(i),h=!1,L(y)}}}function nn(o,a,e){let t={count:0},s=t;function n(){s.count++}function p(){e(0,t.foo=1,t)}return[t,n,p,()=>n(),()=>p()]}class sn extends S{constructor(a){super(),q(this,a,nn,Z,N,{})}}const an=o=>({}),C=o=>({slot:"example"}),tn=o=>({}),H=o=>({slot:"code"});function en(o){let a,e;return a=new sn({}),{c(){U(a.$$.fragment)},l(t){V(a.$$.fragment,t)},m(t,s){z(a,t,s),e=!0},i(t){e||(d(a.$$.fragment,t),e=!0)},o(t){g(a.$$.fragment,t),e=!1},d(t){F(a,t)}}}function on(o){let a;const e=o[0].default,t=G(e,o,o[1],C),s=t||en();return{c(){s&&s.c()},l(n){s&&s.l(n)},m(n,p){s&&s.m(n,p),a=!0},p(n,p){t&&t.p&&(!a||p&2)&&J(t,e,n,n[1],a?R(e,n[1],p,an):Q(n[1]),C)},i(n){a||(d(s,n),a=!0)},o(n){g(s,n),a=!1},d(n){s&&s.d(n)}}}function pn(o){let a,e=`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> myObj <span class="token operator">=</span> obj<span class="token punctuation">;</span>
  
  <span class="token keyword">function</span> <span class="token function">incrementWrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    myObj<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">assignToObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>obj<span class="token punctuation">.</span>count<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">incrementWrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>This does not update the DOM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">assignToObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>But this will trigger the update (assigned in the function)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>`,t;return{c(){a=new P(!1),t=M(),this.h()},l(s){a=X(s,!1),t=M(),this.h()},h(){a.a=t},m(s,n){a.m(e,s,n),r(s,t,n)},p:O,d(s){s&&l(t),s&&a.d()}}}function cn(o){let a;const e=o[0].default,t=G(e,o,o[1],H),s=t||pn();return{c(){s&&s.c()},l(n){s&&s.l(n)},m(n,p){s&&s.m(n,p),a=!0},p(n,p){t&&t.p&&(!a||p&2)&&J(t,e,n,n[1],a?R(e,n[1],p,tn):Q(n[1]),H)},i(n){a||(d(s,n),a=!0)},o(n){g(s,n),a=!1},d(n){s&&s.d(n)}}}var I;function ln(o){let a,e,t;return e=new Y({props:{src:String.raw(I||(I=W([`<script>
let obj = {
count: 0
};
let myObj = obj;

function incrementWrong() {
myObj.count++;
}
function assignToObj() {
obj.foo = 1;
}
<\/script>
<div>{obj.count}</div>
<button on:click={()=>incrementWrong()}>This does not update the DOM</button>
<button on:click={()=>assignToObj()}>But this will trigger the update (assigned in the function)</button>`]))),meta:{Wrapper:"/src/lib/Example.svelte",example:!0},$$slots:{code:[cn],example:[on]},$$scope:{ctx:o}}}),{c(){a=f("div"),U(e.$$.fragment)},l(s){a=_(s,"DIV",{});var n=m(a);V(e.$$.fragment,n),n.forEach(l)},m(s,n){r(s,a,n),z(e,a,null),t=!0},p(s,[n]){const p={};n&2&&(p.$$scope={dirty:n,ctx:s}),e.$set(p)},i(s){t||(d(e.$$.fragment,s),t=!0)},o(s){g(e.$$.fragment,s),t=!1},d(s){s&&l(a),F(e)}}}function un(o,a,e){let{$$slots:t={},$$scope:s}=a;return o.$$set=n=>{"$$scope"in n&&e(1,s=n.$$scope)},[t,s]}class _n extends S{constructor(a){super(),q(this,a,un,ln,N,{})}}export{_n as default};
