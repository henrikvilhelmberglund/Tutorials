var h=Object.freeze,z=Object.defineProperty;var y=(o,n)=>h(z(o,"raw",{value:h(n||o.slice())}));import{S as O,i as j,s as A,k as m,q as b,a as F,l as d,m as g,r as x,h as l,c as G,b as i,D as C,P,H as r,y as D,z as H,A as J,g as f,d as k,B as T,C as q,E as B,F as I,G as V,Q,e as w,R}from"./index.37298988.js";import{E as U}from"./Example.0a49acc8.js";function W(o){let n,e=JSON.stringify(o[0])+"",t,a,s,p,_,$;return{c(){n=m("div"),t=b(e),a=F(),s=m("button"),p=b("Click me")},l(c){n=d(c,"DIV",{});var u=g(n);t=x(u,e),u.forEach(l),a=G(c),s=d(c,"BUTTON",{});var v=g(s);p=x(v,"Click me"),v.forEach(l)},m(c,u){i(c,n,u),C(n,t),i(c,a,u),i(c,s,u),C(s,p),_||($=P(s,"click",o[2]),_=!0)},p:r,i:r,o:r,d(c){c&&l(n),c&&l(a),c&&l(s),_=!1,$()}}}function K(o){let n=[];function e(){n.push(1)}return[n,e,()=>e()]}class L extends O{constructor(n){super(),j(this,n,K,W,A,{})}}const M=o=>({}),E=o=>({slot:"example"}),X=o=>({}),S=o=>({slot:"code"});function Y(o){let n,e;return n=new L({}),{c(){D(n.$$.fragment)},l(t){H(n.$$.fragment,t)},m(t,a){J(n,t,a),e=!0},i(t){e||(f(n.$$.fragment,t),e=!0)},o(t){k(n.$$.fragment,t),e=!1},d(t){T(n,t)}}}function Z(o){let n;const e=o[0].default,t=q(e,o,o[1],E),a=t||Y();return{c(){a&&a.c()},l(s){a&&a.l(s)},m(s,p){a&&a.m(s,p),n=!0},p(s,p){t&&t.p&&(!n||p&2)&&B(t,e,s,s[1],n?V(e,s[1],p,M):I(s[1]),E)},i(s){n||(f(a,s),n=!0)},o(s){k(a,s),n=!1},d(s){a&&a.d(s)}}}function nn(o){let n,e=`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>`,t;return{c(){n=new Q(!1),t=w(),this.h()},l(a){n=R(a,!1),t=w(),this.h()},h(){n.a=t},m(a,s){n.m(e,a,s),i(a,t,s)},p:r,d(a){a&&l(t),a&&n.d()}}}function an(o){let n;const e=o[0].default,t=q(e,o,o[1],S),a=t||nn();return{c(){a&&a.c()},l(s){a&&a.l(s)},m(s,p){a&&a.m(s,p),n=!0},p(s,p){t&&t.p&&(!n||p&2)&&B(t,e,s,s[1],n?V(e,s[1],p,X):I(s[1]),S)},i(s){n||(f(a,s),n=!0)},o(s){k(a,s),n=!1},d(s){a&&a.d(s)}}}var N;function sn(o){let n,e,t;return e=new U({props:{src:String.raw(N||(N=y([`<script>
let array = []
function increment() {
array.push(1);
}
<\/script>
<div>{JSON.stringify(array)}</div>
<button on:click={()=>increment()}>Click me</button>`]))),meta:{Wrapper:"/src/lib/Example.svelte",example:!0},$$slots:{code:[an],example:[Z]},$$scope:{ctx:o}}}),{c(){n=m("div"),D(e.$$.fragment)},l(a){n=d(a,"DIV",{});var s=g(n);H(e.$$.fragment,s),s.forEach(l)},m(a,s){i(a,n,s),J(e,n,null),t=!0},p(a,[s]){const p={};s&2&&(p.$$scope={dirty:s,ctx:a}),e.$set(p)},i(a){t||(f(e.$$.fragment,a),t=!0)},o(a){k(e.$$.fragment,a),t=!1},d(a){a&&l(n),T(e)}}}function tn(o,n,e){let{$$slots:t={},$$scope:a}=n;return o.$$set=s=>{"$$scope"in s&&e(1,a=s.$$scope)},[t,a]}class cn extends O{constructor(n){super(),j(this,n,tn,sn,A,{})}}export{cn as default};
